<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleProvider</name>
    </assembly>
    <members>
        <member name="T:SimpleProvider.Analyzer.Builder">
            <summary>
                Build Dyamic Types and Compiles Emited C# code at run time.
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Builder.#ctor(SimpleProvider.Analyzer.Structures.SnippetContainer)">
            <summary>
                Create instance of the builder
            </summary>
            <param name="source">Source file generated by the analyzer.</param>
        </member>
        <member name="P:SimpleProvider.Analyzer.Builder.AssemblyTypes">
            <summary>
                Collection of the compiled types contained in the Builder
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Builder.Compiled">
            <summary>
                True if the source has been compiled.
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Builder.GetTypeByName(System.String)">
            <summary>
                Return the Specified Type
            </summary>
            <param name="typeName">Name of the Type</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Analyzer.Builder.Build(System.String,System.String)">
            <summary>
            Build Provided Source Code and return an assembly 
            </summary>
            <param name="name">Name of the new Assembly</param>
            <param name="source">C# Source Code to Build</param>
            <returns></returns>
        </member>
        <member name="T:SimpleProvider.Analyzer.Enums.CodeType">
            <summary>
                Type that is contained for the generator
            </summary>
        </member>
        <member name="F:SimpleProvider.Analyzer.Enums.CodeType.Class">
            <summary>
                Appends Class to the generated code
            </summary>
        </member>
        <member name="F:SimpleProvider.Analyzer.Enums.CodeType.Struct">
            <summary>
                Appends Struct to the generated code
            </summary>
        </member>
        <member name="F:SimpleProvider.Analyzer.Enums.CodeType.IFace">
            <summary>
                Appends Interface to the generated code
            </summary>
        </member>
        <member name="T:SimpleProvider.Analyzer.Extension.Extenders">
            <summary>
                Extensions
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Extension.Extenders.ToPascalCase(System.String)">
            <summary>
                Convert string to an Pascal Case
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleProvider.Analyzer.Scanner">
            <summary>
                Simple Database Scanner
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Scanner.#ctor(System.String,SimpleProvider.Enumerators.ProviderType)">
            <summary>
                Create an instance of th DB Scanner (If initial catalog is left blank it will scan the entire DB Instance)
            </summary>
            <param name="connectionString">Valid Connection string to an Database</param>
            <param name="ptype">Provider Type that specifies the type of Database</param>
        </member>
        <member name="M:SimpleProvider.Analyzer.Scanner.GetDatabaseNames">
            <summary>
                Return an list of the Databases contained in an Sql Instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Analyzer.Scanner.LoadTableInformation(System.Action,System.Action{System.Int32},System.Action)">
            <summary>
                Return an collection of Table Information contained in an DB Instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Analyzer.Scanner.GetRowCount(System.String)">
            <summary>
                Return an RowCount from the specified table
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleProvider.Analyzer.Structures.Column">
            <summary>
            Table Column information
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.Name">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.Id">
            <summary>
                Column ID from the sys.columns table
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.Size">
            <summary>
            Size in Bytes
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.DataType">
            <summary>
                Data Type
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.NetType">
            <summary>
            .NET Equivalent of the DB Data Type
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.Nullable">
            <summary>
                Nullable?
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.Identity">
            <summary>
                Scope Identity Column
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.FK">
            <summary>
                Foreign Key
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Column.PK">
            <summary>
                Primary Key
            </summary>
        </member>
        <member name="T:SimpleProvider.Analyzer.Structures.SnippetContainer">
            <summary>
                Snippet Container - Contains Snippets used by the builder for generating code at run time.
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.SnippetContainer.#ctor">
            <summary>
                Blank instance
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.SnippetContainer.#ctor(System.String)">
            <summary>
                Blank Instance
            </summary>
            <param name="ns">Default Namespace</param>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.SnippetContainer.Snippets">
            <summary>
                Contained Code Snippets
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.SnippetContainer.Namespace">
            <summary>
                Namespace for the contained types
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.SnippetContainer.Template">
            <summary>
                Code Template
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.SnippetContainer.Types">
            <summary>
                Type Names contained in the Snippets
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.SnippetContainer.Using">
            <summary>
                Assemblies contained in the Using Block
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.SnippetContainer.ToString">
            <summary>
                Returns the generated code
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.SnippetContainer.AddSnippet(SimpleProvider.Analyzer.Structures.Table)">
            <summary>
                Add new code snippet to the collection.
            </summary>
            <param name="table">Table from the Analyzer</param>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.SnippetContainer.RemoveSnippet(SimpleProvider.Analyzer.Structures.Table)">
            <summary>
                Remove an Code Snippet
            </summary>
            <param name="table">Table from the Analyzer</param>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.SnippetContainer.Clear">
            <summary>
                Clears the Snippet Collections
            </summary>
        </member>
        <member name="T:SimpleProvider.Analyzer.Structures.Table">
            <summary>
            Structure to Contain Table information from the Database
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.Columns">
            <summary>
                Columns
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.Indexes">
            <summary>
                Database Indexes
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.IsTable">
            <summary>
             View / Table
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.Name">
            <summary>
                Table name
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.ClassName">
            <summary>
            Cleaned Name 
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.Names">
            <summary>
                Name of the columns contained
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.ObjectId">
            <summary>
            Object ID from the Database
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.Schema">
            <summary>
                Schema Name
            </summary>
        </member>
        <member name="P:SimpleProvider.Analyzer.Structures.Table.Type">
            <summary>
                This is either view or table
            </summary>
        </member>
        <member name="M:SimpleProvider.Analyzer.Structures.Table.ToString">
            <summary>
                Display Schema and Table Name
            </summary>
            <returns></returns>
        </member>
        <member name="T:SimpleProvider.Attributes.Column">
            <summary>
                Binds an Database Field to the Properties of an Class
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Column.IsNullable">
            <summary>
                Property allows nullable types
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Column.IsScope">
            <summary>
                Is an database generated value
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Column.IsVirtual">
            <summary>
                Property does not exist in the Database Table
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Column.DataType">
            <summary>
                Type of Data Contained
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Column.Length">
            <summary>
                Maximum Length in bytes of the property
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Column.Name">
            <summary>
                Property Name is different than that of the Field in the DataTable
            </summary>
        </member>
        <member name="T:SimpleProvider.Attributes.Definition">
            <summary>
                Maps an class to an Database Table or View
            </summary>
        </member>
        <member name="M:SimpleProvider.Attributes.Definition.#ctor">
            <summary>
                Empty Definition
            </summary>
        </member>
        <member name="M:SimpleProvider.Attributes.Definition.#ctor(System.String,System.String,System.String[])">
            <summary>
                Default Constructor
            </summary>
            <param name="table">Table Name</param>
            <param name="schema">Schema Name</param>
            <param name="keyNames">Key Names</param>
        </member>
        <member name="P:SimpleProvider.Attributes.Definition.TableName">
            <summary>
                Table Name
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Definition.SchemaName">
            <summary>
                Schema Name
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Definition.PrimaryKeys">
            <summary>
                Primary Keys or Combination of Properties to make an Unique Identifier
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Definition.IsReadOnly">
            <summary>
                Readonly Table
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Definition.IsView">
            <summary>
                ReadOnly View
            </summary>
        </member>
        <member name="T:SimpleProvider.Attributes.Relationship">
            <summary>
            Defines an Foreign Key Constraint 
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Relationship.Source">
            <summary>
            Source Name 
            </summary>
        </member>
        <member name="P:SimpleProvider.Attributes.Relationship.ColumnName">
            <summary>
            Column or Property Name
            </summary>
        </member>
        <member name="T:SimpleProvider.Constants.Shared">
            <summary>
                Contains Standard CRUD - SQL Queries for use by the ORM
                Does not contain any query information for the "WHERE" clause
                "Where" clauses will be generated by the ORM at runtime
            </summary>
        </member>
        <member name="F:SimpleProvider.Constants.Shared.Field">
            <summary>
                Used in conjunction with Update, Insert and Delete
            </summary>
        </member>
        <member name="T:SimpleProvider.Enumerators.ProviderType">
            <summary>
                Specifies the Database Type
            </summary>
        </member>
        <member name="F:SimpleProvider.Enumerators.ProviderType.SqlServer">
            <summary>
                Microsoft Sql Server - This is the default
            </summary>
        </member>
        <member name="F:SimpleProvider.Enumerators.ProviderType.MySql">
            <summary>
                MySql Server
            </summary>
        </member>
        <member name="F:SimpleProvider.Enumerators.ProviderType.Sqlite">
            <summary>
                Sqlite Server
            </summary>
        </member>
        <member name="F:SimpleProvider.Enumerators.ProviderType.PostGres">
            <summary>
                PostGress Sql Server
            </summary>
        </member>
        <member name="F:SimpleProvider.Enumerators.ProviderType.Oracle">
            <summary>
                Oracle Database
            </summary>
        </member>
        <member name="T:SimpleProvider.Extensions.Extenders">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimpleProvider.Extensions.Extenders.GetMappings(System.Object,System.String[])">
            <summary>
             Returns all readable / writable properties and column attributes from the current type
            </summary>
            <param name="obj">Object</param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Extensions.Extenders.GetProperties(System.Object,System.String[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Extensions.Extenders.GetColumnDefinition(System.Reflection.PropertyInfo)">
            <summary>
            Return the column defintion for the selected property
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Extensions.Extenders.GetDefinition(System.Object)">
            <summary>
            Return the definition attribute from the selected Type
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Extensions.Extenders.GetKeyNames(System.Object)">
            <summary>
            Return primary key names contained in the Definition Attribute
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleProvider.Mapping.CommandSets">
            <summary>
            Dynamic SQL Generation
            Generates CommandSets and associated Options
            </summary>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.#ctor(SimpleProvider.Enumerators.ProviderType)">
            <summary>
            Database Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateInsert(System.Object)">
            <summary>
             Generate Insert Command Set
            </summary>
            <param name="record">Object that represents an DB row</param>
            <returns>Insert CommandSet</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateSelect(System.Object)">
            <summary>
                Create Select based on the provided object
            </summary>
            <param name="record">Object that represents an DB row</param>
            <returns>Select Command Set</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateExists(System.Object)">
            <summary>
             Used internally
            </summary>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateExists``1(SimpleProvider.Option[])">
            <summary>
                Creates Exists Command Set
            </summary>
            <typeparam name="T">class, new()</typeparam>
            <param name="args">Options for use in the "Where" clause</param>
            <returns>Exists Commandset</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateCommandSets(System.Object,System.Object)">
            <summary>
            Return an collection of CommandSets related to the specified object 
            </summary>
            <param name="record"></param>
            <param name="record2">Optional parameter to generate update string</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateSelect``1(SimpleProvider.Option[])">
            <summary>
                Create Select Command Set
            </summary>
            <typeparam name="T">class, new()</typeparam>
            <param name="args">Options for use in the "WHERE" clause</param>
            <returns>Select Commandset</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateTop``1(System.Int32,SimpleProvider.Option[])">
            <summary>
            Commandset that selects the specified amount of records.
            </summary>
            <typeparam name="T">class, new</typeparam>
            <param name="number">Number of records to return</param>
            <param name="args">Options for use in the "WHERE" clause</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateTop(System.Int32,System.Type,SimpleProvider.Option[])">
            <summary>
             Commandset that selects the specified amount of records.
            </summary>
            <param name="number">Number of records to return</param>
            <param name="type">type to generate query for.</param>
            <param name="args">Options for use in the "WHERE" clause</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateUpdate(System.Object,System.Object,SimpleProvider.Option[])">
            <summary>
             Create Update Commandset - Runs an comparison of the local object versus the database record.
            </summary>
            <param name="target">Changed Record</param>
            <param name="source">Database Record</param>
            <param name="args">Options - Used to overed the where clause</param>
            <returns>Update Commandset</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateDelete(System.Object)">
            <summary>
            Create Delete Commandset - Delete is generated from the Keys contained in the Definition Attribute
            </summary>
            <param name="record"></param>
            <returns>Delete Commandset</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateDelete``1(SimpleProvider.Option[])">
            <summary>
                Create delete command set
            </summary>
            <typeparam name="T">class, new()</typeparam>
            <param name="args">Options for use in the "WHERE" clause</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateExecute(System.String,System.String,System.Object[])">
            <summary>
             Commandset for Stored Procedures
            </summary>
            <param name="procname">Procedure Name</param>
            <param name="schema">Database Schema</param>
            <param name="parameters">Values for the parameters</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateCount``1(System.String,System.Boolean,SimpleProvider.Option[])">
            <summary>
            Command Set for getting an row count from the DB
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="distinct"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.CommandSets.CreateWhere(SimpleProvider.Option[])">
            <summary>
            Generate the where clause for the command sets
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.Mapper.Map``1(System.Data.IDataRecord)">
            <summary>
                Maps an IDataRecord to an object of the specified type at run time.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idr"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.Mapper.Map``1(System.Data.Common.DbDataRecord)">
            <summary>
                Maps an IDataRecord to an object of the specified type at run time.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idr"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Mapping.Mapper.Map(System.Data.IDataRecord,System.Type)">
            <summary>
                Map used to specify the type for more dynamic code.
            </summary>
            <param name="idr">DbDataRecord from DbDataReader</param>
            <param name="type">Type of the object to be returned</param>
            <returns>Returns instance of the specified type populated from the database.</returns>
        </member>
        <member name="M:SimpleProvider.Mapping.Mapper.Map(System.Data.Common.DbDataRecord,System.Type)">
            <summary>
                Map used to specify the type for more dynamic code.
            </summary>
            <param name="idr">DbDataRecord from DbDataReader</param>
            <param name="type">Type of the object to be returned</param>
            <returns>Returns instance of the specified type populated from the database.</returns>
        </member>
        <member name="T:SimpleProvider.CommandSet">
            <summary>
                CommandSet - Prepares the Command Text and Parameter information for the Mapper
            </summary>
        </member>
        <member name="P:SimpleProvider.CommandSet.Name">
            <summary>
            Name for the Command Set
            </summary>
        </member>
        <member name="M:SimpleProvider.CommandSet.#ctor(System.Boolean)">
            <summary>
             Empty instance of the commandset
            </summary>
        </member>
        <member name="M:SimpleProvider.CommandSet.#ctor(System.String,SimpleProvider.Option[])">
            <summary>
             CommandSet with the specified Query and Parameters
            </summary>
            <param name="commandtext">Query</param>
            <param name="parameters">Parameters</param>
        </member>
        <member name="P:SimpleProvider.CommandSet.CommandText">
            <summary>
                SQL Command Text
            </summary>
        </member>
        <member name="P:SimpleProvider.CommandSet.Parameters">
            <summary>
                List of Mapping Parameters this should match the parameters contained in the SQL
            </summary>
        </member>
        <member name="P:SimpleProvider.CommandSet.Scope">
            <summary>
            Passes the IdentityScope back from the Database
            </summary>
        </member>
        <member name="P:SimpleProvider.CommandSet.HasScope">
            <summary>
            CommandSet contains an IdentityScope
            </summary>
        </member>
        <member name="P:SimpleProvider.CommandSet.HasParameters">
            <summary>
            CommandSet contains Parameter Data
            </summary>
        </member>
        <member name="P:SimpleProvider.CommandSet.ReadOnly">
            <summary>
            Underlying definition is marked as readonly.
            </summary>
        </member>
        <member name="M:SimpleProvider.CommandSet.Add(SimpleProvider.Option)">
            <summary>
            Add an option to the command set.
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:SimpleProvider.CommandSet.AddRange(System.Collections.Generic.IEnumerable{SimpleProvider.Option})">
            <summary>
            Add an range of parameters to the collection
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:SimpleProvider.EqualityType">
            <summary>
                Operation Type for Mapping Parameters
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.None">
            <summary>
                Not used for mapping
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.Equals">
            <summary>
                Query equality operate is set to =
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.GreaterThan">
            <summary>
                Query equality operator is set to >
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.LessThan">
            <summary>
                Query equality operator is set to less than
                ///
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.StartsWith">
            <summary>
                Query equality operator is set to 'like'
                Generated parameter adds 'value%'
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.EndsWith">
            <summary>
                Query equality operator is set to 'like'
                Generated parameter adds '%value'
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.Contains">
            <summary>
                Query equality operator is set to 'like'
                Generated parameter adds '%value%'
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.NotEqual">
            <summary>
                SQL equality operator is set to !=
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.Is">
            <summary>
            SQL equality operator is set to "IS NULL"
            </summary>
        </member>
        <member name="F:SimpleProvider.EqualityType.IsNot">
            <summary>
            SQL equality operator is set to "IS NOT NULL"
            </summary>
        </member>
        <member name="T:SimpleProvider.Option">
            <summary>
                Options for the sql generator contained in the mapper.
                Used to pass parameters to the database and orderby information
            </summary>
        </member>
        <member name="M:SimpleProvider.Option.#ctor(System.String)">
            <summary>
            Constructor for an OrderBy option
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SimpleProvider.Option.#ctor(System.String,System.Object)">
            <summary>
            Default Option
            </summary>
            <param name="name">Field Name</param>
            <param name="value"></param>
        </member>
        <member name="M:SimpleProvider.Option.#ctor(System.String,System.Object,SimpleProvider.EqualityType)">
            <summary>
                Create Parameter Instance
            </summary>
            <param name="fieldname">Field Name</param>
            <param name="value">Value</param>
            <param name="mt">Equality Type</param>
        </member>
        <member name="M:SimpleProvider.Option.#ctor(System.String,System.Object,System.Boolean,SimpleProvider.EqualityType)">
            <summary>
            Create OrderedBy and Parameter Instance
            </summary>
            <param name="fieldname">Field Name</param>
            <param name="value">Value</param>
            <param name="isAscending">Using ascending sort (default is descending)</param>
            <param name="mt">Equality Type</param>
        </member>
        <member name="P:SimpleProvider.Option.FieldName">
            <summary>
                Parameter Name or Field Name
            </summary>
        </member>
        <member name="P:SimpleProvider.Option.IsAscending">
            <summary>
                Order By Direction
            </summary>
        </member>
        <member name="P:SimpleProvider.Option.OrderBy">
            <summary>
            Use in the Order By Clause
            </summary>
        </member>
        <member name="P:SimpleProvider.Option.UseOrStatement">
            <summary>
            Use "or" instead of "and" when this is set to true.
            </summary>
        </member>
        <member name="P:SimpleProvider.Option.Operator">
            <summary>
            Return the underlying operation type as an string for use in query generation
            </summary>
        </member>
        <member name="P:SimpleProvider.Option.Type">
            <summary>
            Underlying Equality Type 
            </summary>
        </member>
        <member name="P:SimpleProvider.Option.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:SimpleProvider.Option.ToString">
            <summary>
            Display the Field Name and Value
            </summary>
            <returns></returns>
        </member>
        <member name="T:SimpleProvider.Provider">
            <summary>
                Generic Object Relationship Mapper
            </summary>
        </member>
        <member name="M:SimpleProvider.Provider.ProcessCommands(SimpleProvider.CommandSet[])">
            <summary>
             Wrap command sets in an Database Transaction. Any failure will make it roll back.
            </summary>
            <param name="commands">Commands to execute against the database</param>
            <returns>True if the operation completes successfully</returns>
        </member>
        <member name="P:SimpleProvider.Provider.CommandTimeout">
            <summary>
                Default Timeout for Commands used by the Provider Class
            </summary>
        </member>
        <member name="P:SimpleProvider.Provider.Connection">
            <summary>
                Return the Underlying Connection
            </summary>
        </member>
        <member name="P:SimpleProvider.Provider.Commands">
            <summary>
            Expose the underlying SQL Generator
            </summary>
        </member>
        <member name="P:SimpleProvider.Provider.Schema">
            <summary>
                Default Schema
            </summary>
        </member>
        <member name="M:SimpleProvider.Provider.#ctor(System.String,SimpleProvider.Enumerators.ProviderType)">
            <summary>
             Instantiate the Provider class using the specified connection string and Database Type
            </summary>
            <param name="connection">Connection String</param>
            <param name="ptype">Database Type (Default is ProviderType.SqlServer)</param>
        </member>
        <member name="M:SimpleProvider.Provider.#ctor(System.String,System.String,SimpleProvider.Enumerators.ProviderType)">
            <summary>
            Instantiate the Provider class using the specified connection string and Database Type
            </summary>
            <param name="connection">Connection String</param>
            <param name="schema">Default Schema (Default is "dbo")</param>
            <param name="ptype">Database Type (Defaul is ProviderType.SqlServer)</param>
        </member>
        <member name="M:SimpleProvider.Provider.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Instantiate the Provider class using the specified connection string and Database Type
            </summary>
            <param name="connection">DbConnection instance</param>
            <param name="schema">Default Schema (Default is "dbo")</param>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecord(System.Data.Common.DbCommand,System.Type)">
            <summary>
                Return an single object
            </summary>
            <param name="command">DbCommand (SqlCommand, OracleCommand, etc)</param>
            <param name="type">Reference Type to be returned</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecord(System.Object,System.Type)">
            <summary>
                Get the Database Copy of the record
            </summary>
            <param name="record">Database Record</param>
            <param name="type">Object Type</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecord``1(System.String)">
            <summary>
                Return single instance of T based
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandtext"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecord``1(System.Data.Common.DbCommand)">
            <summary>
                Return single instance of T from the database
            </summary>
            <typeparam name="T">T : class, new()</typeparam>
            <param name="command">DbCommand (SqlCommand, OracleCommand, etc)</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecord``1(SimpleProvider.Option[])">
            <summary>
                Return single instance of T from the database
            </summary>
            <typeparam name="T">T : class, new()</typeparam>
            <param name="args">Collection of Mapping Parameters</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetDynamicRecords(System.Data.Common.DbCommand)">
            <summary>
                Return an collection of objects that match the query provided to the command.
            </summary>
            <param name="command">DbCommand Interface.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecords``1(SimpleProvider.Option[])">
            <summary>
             Return collection of T using the provided mapping parameters. Schema / Table names are generated from the
             Definition Attribute
            </summary>
            <typeparam name="T">T : class, new()</typeparam>
            <param name="args">Fields and values to check for.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecords``1(System.String,SimpleProvider.Option[])">
            <summary>
                Return collection of T using the provided query and mapping parameters
            </summary>
            <typeparam name="T">T : class, new()</typeparam>
            <param name="cmdtxt">Query to execute</param>
            <param name="parameters">Collection of parameters</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecords``1(System.Data.Common.DbCommand,System.Action,System.Action)">
            <summary>
             Returns collection of T using the provided DbCommand
            </summary>
            <typeparam name="T">T : class, new()</typeparam>
            <param name="command">DbCommand</param>
            <param name="step">Notify the host application an record has been loaded.</param>
            <param name="complete">Notify the host application the operation is completed</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetTopRecords``1(System.Int32,SimpleProvider.Option[])">
            <summary>
                Return the specified amount of records of the specified type
            </summary>
            <typeparam name="T">T : class, new()</typeparam>
            <param name="count">Number of rows to return</param>
            <param name="args">Parameters for the where clause</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetTopRecords(System.Int32,System.Type,SimpleProvider.Option[])">
            <summary>
                Returns the specified amount of records from the Database
            </summary>
            <param name="count">Number of records to retrieve</param>
            <param name="type">Reference Type</param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetValue``1(System.String)">
            <summary>
                Retrieve an Value Type from the Database
            </summary>
            <typeparam name="T">Value Type</typeparam>
            <param name="cmdtxt">Command Text for the DBCommand</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetValue``1(System.String,SimpleProvider.Option[])">
            <summary>
                Return an Value Type from the Database
            </summary>
            <typeparam name="T">Value Type</typeparam>
            <param name="cmdtxt">Query String</param>
            <param name="args">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetValue``1(System.Data.Common.DbCommand)">
            <summary>
                Return a Value type from the database
            </summary>
            <typeparam name="T">Value Type</typeparam>
            <param name="dbCommand">DbCommand (e.g. SqlCommand, OracleCommand)</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetValues``1(System.Data.Common.DbCommand)">
            <summary>
                Return an collection of T from the database
            </summary>
            <typeparam name="T">Value Type (int, char, bool etc....)</typeparam>
            <param name="dbCommand">DbCommand (e.g. SqlCommand, OracleCommand)</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetValues``1(System.String,SimpleProvider.Option[])">
            <summary>
                Return an collection of T from the database
            </summary>
            <typeparam name="T">Value Type (int, char, bool etc....)</typeparam>
            <param name="cmdtxt">Query Text</param>
            <param name="args">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.Insert(System.Object)">
            <summary>
                Insert an record into the database
            </summary>
            <param name="record"></param>
            <returns>True if the insert is successful</returns>
        </member>
        <member name="M:SimpleProvider.Provider.Insert(System.Data.Common.DbCommand)">
            <summary>
                Insert an record into the database
            </summary>
            <param name="command">DbCommand with Query and Parameters set</param>
            <returns>True if the insert is successful</returns>
        </member>
        <member name="M:SimpleProvider.Provider.Update(System.Data.Common.DbCommand)">
            <summary>
                Update Database Record
            </summary>
            <param name="command">DbCommand (SqlCommand, OracleCommand etc...)</param>
            <returns>True if the update is successful</returns>
        </member>
        <member name="M:SimpleProvider.Provider.Update(System.Object,SimpleProvider.Option[])">
            <summary>
                Updates the database record, if it does not exist then it inserts the record.
                Automatically creates the query based on changes of the object to be update versus what is contained in the
                database
            </summary>
            <param name="record">Object to be updated</param>
            <param name="args">Optional parameters to override the default behavior</param>
            <returns>True if the operation completes successfully.</returns>
        </member>
        <member name="M:SimpleProvider.Provider.Delete(System.Object)">
            <summary>
                Delete the specified record from the database
            </summary>
            <param name="record"></param>
            <returns>Returns true if the record is deleted</returns>
        </member>
        <member name="M:SimpleProvider.Provider.Exists``1(SimpleProvider.Option[])">
            <summary>
            Verify if an record exists based on the options provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.Exists(System.Object)">
            <summary>
                Verify if an record exists in the database
            </summary>
            <param name="record"></param>
            <returns>True if the record exists</returns>
        </member>
        <member name="M:SimpleProvider.Provider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
                Execute NonQuery using the DbCommand
            </summary>
            <param name="command">DbCommand (SqlCommand, OracleCommand, etc....)</param>
            <returns>Number of records effected</returns>
        </member>
        <member name="M:SimpleProvider.Provider.ExecuteNonQuery(System.String,SimpleProvider.Option[])">
            <summary>
            </summary>
            <param name="cmdtxt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.GetRecordByProcedure``1(System.String,System.Object[])">
            <summary>
            Executes an stored procedure that returns an record set
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procedureName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleProvider.Provider.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SimpleProvider.Provider.Dispose">
            <summary>
            </summary>
        </member>
        <member name="T:SimpleProvider.ProviderException">
            <summary>
            Custom Exceptions from the Provider
            </summary>
        </member>
        <member name="M:SimpleProvider.ProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Create an new exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:SimpleProvider.ValuePair`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU"></typeparam>
        </member>
        <member name="P:SimpleProvider.ValuePair`2.Key">
            <summary>
            Data Key
            </summary>
        </member>
        <member name="P:SimpleProvider.ValuePair`2.Value">
            <summary>
            Data Value
            </summary>
        </member>
        <member name="M:SimpleProvider.ValuePair`2.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:SimpleProvider.ValuePair`2.#ctor(`0,`1)">
            <summary>
            Instance created with Key and Value Set
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:SimpleProvider.PropertyMap">
            <summary>
            Value Pair with PropertyInfo / Column Attribute Information
            </summary>
        </member>
    </members>
</doc>
